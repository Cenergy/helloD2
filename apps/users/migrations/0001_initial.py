# Generated by Django 3.1.4 on 2020-12-26 19:04

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Banner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='title')),
                ('image', models.ImageField(upload_to='banner/%Y/%m', verbose_name='lunbo')),
                ('url', models.URLField(verbose_name='url')),
                ('index', models.IntegerField(default=100, verbose_name='index')),
                ('add_time', models.DateField(default=datetime.datetime.now, verbose_name='time')),
            ],
            options={
                'verbose_name': 'banner',
                'verbose_name_plural': 'banner',
            },
        ),
        migrations.CreateModel(
            name='EmailVerifyRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20, verbose_name='验证码')),
                ('email', models.EmailField(max_length=50, verbose_name='邮件')),
                ('type_code', models.CharField(choices=[('register', 'register'), ('forget', 'forget')], max_length=10)),
                ('send_time', models.DateField(default=datetime.datetime.now, verbose_name='添加时间')),
            ],
            options={
                'verbose_name': '邮件验证码',
                'verbose_name_plural': '邮件验证码',
            },
        ),
        migrations.CreateModel(
            name='FaceUser',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('faceid', models.TextField(verbose_name='用户唯一值')),
                ('username', models.TextField(verbose_name='用户名')),
                ('knowfacecode', models.TextField(verbose_name='用户人脸矩阵')),
            ],
            options={
                'verbose_name': '用户人脸',
                'verbose_name_plural': '用户人脸',
            },
        ),
        migrations.CreateModel(
            name='Suggestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('suggest_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='用户名')),
                ('suggest_content', models.TextField(verbose_name='建议内容')),
                ('email', models.EmailField(max_length=50, verbose_name='邮件地址')),
                ('suggest_type', models.IntegerField(choices=[(1, '已答复'), (0, '未答复')], default=0, help_text='回复类型', verbose_name='回复类型')),
                ('reply_content', models.TextField(blank=True, default='', null=True, verbose_name='回复内容')),
                ('add_time', models.DateField(default=datetime.datetime.now, verbose_name='添加时间')),
            ],
            options={
                'verbose_name': '用户建议',
                'verbose_name_plural': '用户建议',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('faceid', models.TextField(blank=True, null=True, verbose_name='用户唯一值')),
                ('user_name', models.TextField(blank=True, null=True, verbose_name='用户名')),
                ('knowfacecode', models.TextField(blank=True, default='', null=True, verbose_name='用户人脸矩阵')),
                ('login_type', models.IntegerField(choices=[(0, '未登录'), (1, '未人脸认证'), (2, '已人脸认证')], default=0, help_text='登录类型', verbose_name='登录类型')),
                ('name', models.CharField(blank=True, max_length=30, null=True, verbose_name='姓名')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='出生年月')),
                ('mobile', models.CharField(blank=True, max_length=11, null=True, verbose_name='电话号码')),
                ('gender', models.CharField(choices=[('male', '男'), ('female', '女')], default='male', max_length=6, verbose_name='性别')),
                ('email', models.CharField(blank=True, max_length=100, null=True, verbose_name='邮箱')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户信息',
                'verbose_name_plural': '用户信息',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
